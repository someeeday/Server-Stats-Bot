import os
import matplotlib
matplotlib.use('Agg')  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ backend –¥–æ –∏–º–ø–æ—Ä—Ç–∞ pyplot
from datetime import datetime, timezone, timedelta
from io import BytesIO
from matplotlib.figure import Figure # type: ignore
from aiogram import Bot, Dispatcher, types  # type: ignore
from aiogram.utils.executor import start_polling  # type: ignore
from reportlab.lib.pagesizes import letter  # type: ignore
from reportlab.lib import colors  # type: ignore
from reportlab.lib.units import inch  # type: ignore
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image  # type: ignore
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle  # type: ignore
from reportlab.lib.enums import TA_CENTER, TA_LEFT  # type: ignore
from reportlab.pdfbase import pdfmetrics  # type: ignore
from reportlab.pdfbase.ttfonts import TTFont  # type: ignore
import paramiko  # type: ignore
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton # type: ignore
from monitoring import SystemMonitor
from logger import logger

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
PDF_STORAGE_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "pdf-storage")
LOGS_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "logs")
FONTS_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), "fonts")

MAX_FILES = 10
DEFAULT_FONT = 'DejaVuSans'
ALERT_COOLDOWN = 3600  # 1 —á–∞—Å
MAX_FAILED_ATTEMPTS = 3
LOCKOUT_TIME = 300  # 5 –º–∏–Ω—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
for path in [LOGS_PATH, PDF_STORAGE_PATH]:
    os.makedirs(path, exist_ok=True)

# –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
BOT_MESSAGES = {
    'start': ("ü§ñ *–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤*\n\n"
             "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
             "/log - –û—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ\n"
             "/ssh - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
             "/start_monitor - –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
             "/stop_monitor - –í—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"),
    'ssh_prompt': "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ user@host:",
    'ssh_exists': "–ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {user}@{host}\n–î–ª—è –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
    'ssh_success': "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ",
    'ssh_error': "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ",
    'monitoring_offer': ("üìä –í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã?\n\n"
                        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö\n"
                        "—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∏—Ö —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é."),
    'monitoring_enabled': ("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω\n\n"
                         "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö.\n"
                         "–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_monitor"),
    'monitoring_exists': "‚ùó –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω",
    'monitoring_disabled': "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω",
    'monitoring_not_running': "‚ùó –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω",
    'no_ssh': "‚ùå SSH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ssh –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
    'report_generating': "üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...",
    'report_error': "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞",
    'rate_limit': "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes} –º–∏–Ω."
}

def register_fonts():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        font_path = os.path.join(FONTS_PATH, "DejaVuSans.ttf")
        if os.path.exists(font_path):
            pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
            logger.info("–®—Ä–∏—Ñ—Ç DejaVuSans —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return True
        logger.error("–§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")
        return False

if not register_fonts():
    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —à—Ä–∏—Ñ—Ç—ã")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
monitor = SystemMonitor(bot)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫—ç—à–∏
user_states = {}
ssh_connections = {}
failed_attempts = {}
locked_users = {}

# –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ö–æ—Å—Ç—ã
BLOCKED_HOSTS = {
    'localhost', '127.0.0.1', '::1',
    '0.0.0.0', '0.0.0.0/0',
    '10.0.0.0/8',
    '172.16.0.0/12',
    '192.168.0.0/16',
    'fc00::/7'
}

def cleanup_old_pdfs():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö PDF —Ñ–∞–π–ª–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        files = sorted(
            [os.path.join(PDF_STORAGE_PATH, f) for f in os.listdir(PDF_STORAGE_PATH) 
             if f.endswith('.pdf')],
            key=os.path.getmtime
        )
        if len(files) > MAX_FILES:
            for file in files[:-MAX_FILES]:
                os.remove(file)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

def is_host_allowed(hostname: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞."""
    try:
        if not hostname or not isinstance(hostname, str):
            return False
            
        if any(char in hostname for char in ';&|`$(){}[]<>\\'):
            return False
            
        for blocked in BLOCKED_HOSTS:
            if hostname.startswith(blocked.split('/')[0]):
                return False
                
        return True
    except Exception:
        return False

def check_rate_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫."""
    current_time = datetime.now()
    if user_id in locked_users:
        if (current_time - locked_users[user_id]).total_seconds() < LOCKOUT_TIME:
            return False
        del locked_users[user_id]
        failed_attempts[user_id] = 0
    return True

def record_failed_attempt(user_id: int):
    """–ó–∞–ø–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."""
    failed_attempts[user_id] = failed_attempts.get(user_id, 0) + 1
    if failed_attempts[user_id] >= MAX_FAILED_ATTEMPTS:
        locked_users[user_id] = datetime.now()

async def execute_ssh_command(ssh_client: paramiko.SSHClient, command: str, timeout: int = 10) -> str:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SSH –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        _, stdout, stderr = ssh_client.exec_command(command, timeout=timeout)
        error = stderr.read().decode().strip()
        if error:
            logger.warning(f"SSH –∫–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É: {error}")
        return stdout.read().decode().strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è '{command}': {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

async def get_linux_system_info(ssh_client: paramiko.SSHClient) -> dict:
    """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Linux —Å–∏—Å—Ç–µ–º–µ."""
    try:
        commands = {
            'cpu_load': "cat /proc/loadavg | awk '{print $1*100/$(nproc)}'",
            'ram_usage': "free -b | awk '/Mem:/ {printf \"%.1f|%.1f\", $3/1024/1024, $2/1024/1024}'",
            'disk_usage': "df -B1 / | awk 'NR==2 {printf \"%.1f|%.1f\", $3/1024/1024, $2/1024/1024}'",
            'os_info': "grep PRETTY_NAME /etc/os-release | cut -d= -f2 | tr -d '\"'",
            'kernel': "uname -r",
            'cpu_info': "grep 'model name' /proc/cpuinfo | head -n 1 | cut -d: -f2 | xargs",
            'cpu_cores': "nproc"
        }

        system_data = {}
        for key, cmd in commands.items():
            system_data[key] = await execute_ssh_command(ssh_client, cmd)

        return {
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': await execute_ssh_command(ssh_client, 'whoami'),
            '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞': system_data['os_info'],
            '–í–µ—Ä—Å–∏—è –û–°': system_data['kernel'],
            '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä': system_data['cpu_info'],
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä': system_data['cpu_cores'],
            '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞': system_data['cpu_load'],
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –û–ó–£': system_data['ram_usage'].split('|')[0],
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞': system_data['disk_usage'].split('|')[0]
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Linux: {e}")
        return {}

async def get_windows_system_info(ssh_client: paramiko.SSHClient) -> dict:
    """–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Windows —Å–∏—Å—Ç–µ–º–µ."""
    try:
        commands = {
            'cpu': 'powershell "$loadAvg=(Get-CimInstance Win32_Processor).LoadPercentage;$loadAvg"',
            'ram': 'powershell "$os=Get-CimInstance Win32_OperatingSystem;[math]::Round(($os.TotalVisibleMemorySize-$os.FreePhysicalMemory)/$os.TotalVisibleMemorySize*100,1)"',
            'disk': 'powershell "$disk=Get-PSDrive C;[math]::Round($disk.Used/($disk.Used+$disk.Free)*100,1)"',
            'os_info': 'powershell "(Get-CimInstance Win32_OperatingSystem).Caption"',
            'os_version': 'powershell "(Get-CimInstance Win32_OperatingSystem).Version"',
            'cpu_info': 'powershell "(Get-CimInstance Win32_Processor).Name"',
            'cpu_cores': 'powershell "(Get-CimInstance Win32_Processor).NumberOfLogicalProcessors"'
        }

        system_data = {}
        for key, cmd in commands.items():
            system_data[key] = await execute_ssh_command(ssh_client, cmd)

        return {
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': await execute_ssh_command(ssh_client, 'powershell "$env:USERNAME"'),
            '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞': system_data['os_info'],
            '–í–µ—Ä—Å–∏—è –û–°': system_data['os_version'],
            '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä': system_data['cpu_info'],
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä': system_data['cpu_cores'],
            '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞': system_data['cpu'],
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –û–ó–£': system_data['ram'],
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞': system_data['disk']
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Windows: {e}")
        return {}

async def determine_os_type(ssh_client: paramiko.SSHClient) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –û–°."""
    try:
        output = await execute_ssh_command(ssh_client, 'ver')
        return "windows" if "windows" in output.lower() else "linux"
    except:
        return "linux"

async def get_system_info_ssh(hostname: str, port: int, username: str, password: str) -> dict:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ."""
    try:
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(
            hostname=hostname,
            port=port,
            username=username,
            password=password,
            timeout=30
        )

        os_type = await determine_os_type(ssh_client)
        system_data = (await get_windows_system_info(ssh_client) if os_type == "windows" 
                      else await get_linux_system_info(ssh_client))
        
        system_data.update({'IP-–∞–¥—Ä–µ—Å': hostname, '–ü–æ—Ä—Ç SSH': port})
        
        ssh_client.close()
        return system_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return {}

def add_resource_charts(elements: list, system_data: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤."""
    try:
        resources = [
            ('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', float(system_data.get('–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', 0))),
            ('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –û–ó–£', float(system_data.get('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –û–ó–£', 0))),
            ('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞', float(system_data.get('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞', 0)))
        ]

        fig = Figure(figsize=(12, 4))
        colors = ['#FFB3BA', '#BAFFC9', '#BAE1FF']
        bg_colors = ['#FFE5E8', '#E8FFE5', '#E5F2FF']

        for idx, (title, value) in enumerate(resources):
            value = max(0, min(value, 100))  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            ax = fig.add_subplot(131 + idx)
            sizes = [value, 100 - value]
            
            ax.pie(sizes, colors=[colors[idx], bg_colors[idx]], 
                  startangle=90, autopct='%1.1f%%',
                  pctdistance=0.85,
                  wedgeprops={'edgecolor': 'white', 'linewidth': 1})
            ax.set_title(title, pad=20)

        fig.tight_layout(pad=3.0)
        
        buf = BytesIO()
        fig.savefig(buf, format='png', bbox_inches='tight', dpi=300)
        buf.seek(0)

        img = Image(buf, width=7*inch, height=2.3*inch)
        elements.append(img)
        elements.append(Spacer(1, 0.2*inch))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
        elements.append(Paragraph(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤", 
            ParagraphStyle('Error', fontName=DEFAULT_FONT, fontSize=12, textColor=colors.red)
        ))

def generate_system_report_pdf(system_data=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
    
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç, –≤–∫–ª—é—á–∞—é—â–∏–π:
    - –û—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    - –ì—Ä–∞—Ñ–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    - –ü–æ–¥—Ä–æ–±–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç—ã
    
    Args:
        system_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–∏—Å—Ç–µ–º–µ
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É PDF-—Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        moscow_tz = timezone(timedelta(hours=3))
        now = datetime.now(moscow_tz)
        months_ru = {
            1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
            5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
            9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
        }
        current_date = f"{now.day} {months_ru[now.month]} {now.year} –≥–æ–¥–∞"
        filename_time = now.strftime("%Y%m%d_%H%M%S")
        
        logger.info("–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-—Ñ–∞–π–ª–∞.")
        
        pdf_path = os.path.join(PDF_STORAGE_PATH, f"system_report_{filename_time}.pdf")
        
        doc = SimpleDocTemplate(pdf_path, pagesize=letter, encoding='utf-8')
        elements = []
        
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —à—Ä–∏—Ñ—Ç: {DEFAULT_FONT}")
        
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            fontName=DEFAULT_FONT,
            fontSize=18,
            alignment=TA_CENTER,
            leading=22
        )
        heading_style = ParagraphStyle(
            'CustomHeading',
            fontName=DEFAULT_FONT,
            fontSize=14,
            alignment=TA_LEFT,
            spaceAfter=6,
            leading=18
        )
        normal_style = ParagraphStyle(
            'CustomNormal',
            fontName=DEFAULT_FONT,
            fontSize=12,
            alignment=TA_LEFT,
            leading=14
        )
        
        elements.append(Paragraph("–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã", title_style))
        elements.append(Spacer(1, 0.25*inch))
        elements.append(Paragraph(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {current_date}", normal_style))
        elements.append(Spacer(1, 0.5*inch))
        
        elements.append(Paragraph("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", heading_style))  # –£–±—Ä–∞–Ω–∞ –ª–∏—à–Ω—è—è —Å–∫–æ–±–∫–∞
        
        if system_data:
            system_data_list = [
                ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"],
                ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", system_data.get('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '‚Äî')],
                ["IP-–∞–¥—Ä–µ—Å", system_data.get('IP-–∞–¥—Ä–µ—Å', '‚Äî')],
                ["–ü–æ—Ä—Ç SSH", system_data.get('–ü–æ—Ä—Ç SSH', '‚Äî')],
                ["–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", system_data.get('–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', '‚Äî')],
                ["–í–µ—Ä—Å–∏—è –û–°", system_data.get('–í–µ—Ä—Å–∏—è –û–°', '‚Äî')],
                ["–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä", system_data.get('–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä', '‚Äî')],
                ["–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", system_data.get('–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å', '‚Äî')],
                ["–û–±—ä–µ–º –¥–∏—Å–∫–∞", system_data.get('–û–±—ä–µ–º –¥–∏—Å–∫–∞', '‚Äî')]
            ]
        else:
            system_data_list = [
                ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"],
                ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "‚Äî"],
                ["IP-–∞–¥—Ä–µ—Å", "‚Äî"],
                ["–ü–æ—Ä—Ç SSH", "‚Äî"],
                ["–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "‚Äî"],
                ["–í–µ—Ä—Å–∏—è –û–°", "‚Äî"],
                ["–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä", "‚Äî"],
                ["–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", "‚Äî"],
                ["–û–±—ä–µ–º –¥–∏—Å–∫–∞", "‚Äî"]
            ]
        
        t = Table(system_data_list, colWidths=[2.5*inch, 4*inch])
        t.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, -1), DEFAULT_FONT),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ALIGN', (0, 0), (0, -1), 'LEFT'),
        ]))
        
        elements.append(t)
        elements.append(Spacer(1, 0.5*inch))
        
        elements.append(Paragraph("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤", heading_style))
        elements.append(Spacer(1, 0.1*inch))
        
        add_resource_charts(elements, system_data)
        
        try:
            doc.build(elements)
            logger.info(f"PDF-—Ñ–∞–π–ª '{pdf_path}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        except Exception as pdf_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PDF-—Ñ–∞–π–ª–∞: {pdf_error}")
        
        cleanup_old_pdfs()
        
        return pdf_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}", exc_info=True)
        return None

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    """–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
    await message.answer(BOT_MESSAGES['start'], parse_mode="Markdown")

@dp.message_handler(commands=["ssh"])
async def ssh_command(message: types.Message):
    """–ó–∞–ø—Ä–æ—Å SSH –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    
    if not check_rate_limit(user_id):
        remaining_time = int((LOCKOUT_TIME - (datetime.now() - locked_users[user_id]).total_seconds()) / 60)
        await message.answer(BOT_MESSAGES['rate_limit'].format(minutes=remaining_time))
        return
    
    if message.from_user.id in ssh_connections:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_ssh"))
        
        conn = ssh_connections[message.from_user.id]
        await message.answer(
            BOT_MESSAGES['ssh_exists'].format(
                user=conn['username'],
                host=conn['hostname']
            ),
            reply_markup=keyboard
        )
        return
    
    sent_msg = await message.answer(BOT_MESSAGES['ssh_prompt'])
    user_states[message.from_user.id] = {
        "state": "waiting_ssh",
        "message_id": sent_msg.message_id
    }

@dp.callback_query_handler(lambda c: c.data == 'cancel_ssh')
async def cancel_ssh(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    try:
        if callback_query.from_user.id in ssh_connections:
            del ssh_connections[callback_query.from_user.id]
        
        await callback_query.message.delete()
        
        sent_msg = await callback_query.message.answer(BOT_MESSAGES['ssh_prompt'])
        user_states[callback_query.from_user.id] = {
            "state": "waiting_ssh",
            "message_id": sent_msg.message_id
        }
        
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

@dp.message_handler(lambda message: isinstance(user_states.get(message.from_user.id), dict) and 
                   user_states.get(message.from_user.id, {}).get("state") == "waiting_ssh")
async def process_ssh_input(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö SSH –¥–∞–Ω–Ω—ã—Ö."""
    try:
        if '@' not in message.text:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: user@host")
            return

        username, hostname = message.text.split('@')
        
        if not is_host_allowed(hostname):
            await message.answer("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —ç—Ç–æ–º—É —Ö–æ—Å—Ç—É –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
            return

        orig_message_id = user_states[message.from_user.id]["message_id"]
        
        user_states[message.from_user.id].update({
            "state": "waiting_password",
            "username": username,
            "hostname": hostname
        })
        
        await message.delete()
        
        await bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=orig_message_id,
            text=f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è {username}@{hostname}:"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SSH –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
        user_states.pop(message.from_user.id, None)

@dp.message_handler(lambda message: isinstance(user_states.get(message.from_user.id), dict) and
                   user_states.get(message.from_user.id, {}).get("state") == "waiting_password")
async def process_password(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    try:
        user_data = user_states[message.from_user.id]
        username = user_data["username"]
        hostname = user_data["hostname"]
        password = message.text

        await message.delete()

        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        try:
            ssh_client.connect(
                hostname=hostname,
                username=username,
                password=password,
                timeout=10
            )
            ssh_client.close()
            
            failed_attempts[message.from_user.id] = 0
            
            ssh_connections[message.from_user.id] = {
                "hostname": hostname,
                "username": username,
                "password": password,
                "port": 22
            }
            
            await message.answer(BOT_MESSAGES['ssh_success'])
        except Exception as ssh_error:
            record_failed_attempt(message.from_user.id)
            logger.error(f"–û—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {ssh_error}")
            await message.answer(BOT_MESSAGES['ssh_error'])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
    finally:
        user_states.pop(message.from_user.id, None)

@dp.message_handler(commands=["log"])
async def log_command(message: types.Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ —Å–∏—Å—Ç–µ–º–µ."""
    try:
        if message.from_user.id not in ssh_connections:
            await message.answer(BOT_MESSAGES['no_ssh'])
            return

        wait_message = await message.answer(BOT_MESSAGES['report_generating'])

        conn = ssh_connections[message.from_user.id]
        
        system_data = await get_system_info_ssh(
            conn["hostname"],
            conn.get("port", 22),
            conn["username"],
            conn["password"]
        )

        pdf_file = generate_system_report_pdf(system_data)
        if pdf_file and os.path.exists(pdf_file):
            with open(pdf_file, "rb") as file:
                await message.answer_document(file, caption="–û—Ç—á–µ—Ç –æ —Å–∏—Å—Ç–µ–º–µ")
                await wait_message.delete()
        else:
            await wait_message.edit_text(BOT_MESSAGES['report_error'])
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        
        if not monitor.is_monitoring(message.from_user.id):
            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("‚úÖ –î–∞", callback_data="monitor_start"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="monitor_cancel")
            )
            await message.answer(
                BOT_MESSAGES['monitoring_offer'],
                reply_markup=keyboard
            )
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /log: {e}", exc_info=True)

@dp.callback_query_handler(lambda c: c.data.startswith('monitor_'))
async def process_monitor_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    user_id = callback_query.from_user.id
    
    if callback_query.data == "monitor_start":
        if user_id in ssh_connections:
            started = await monitor.start_monitoring(user_id, ssh_connections[user_id])
            if started:
                await callback_query.message.edit_text(BOT_MESSAGES['monitoring_enabled'])
            else:
                await callback_query.message.edit_text(BOT_MESSAGES['monitoring_exists'])
        else:
            await callback_query.message.edit_text(BOT_MESSAGES['no_ssh'])
    else:
        await callback_query.message.edit_text(
            "üëå –•–æ—Ä–æ—à–æ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω.\n"
            "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /start_monitor"
        )

@dp.message_handler(commands=["start_monitor"])
async def start_monitor_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    user_id = message.from_user.id
    if user_id in ssh_connections:
        if await monitor.start_monitoring(user_id, ssh_connections[user_id]):
            await message.answer(BOT_MESSAGES['monitoring_enabled'])
        else:
            await message.answer(BOT_MESSAGES['monitoring_exists'])
    else:
        await message.answer(BOT_MESSAGES['no_ssh'])

@dp.message_handler(commands=["stop_monitor"])
async def stop_monitor_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if await monitor.stop_monitoring(message.from_user.id):
        await message.answer(BOT_MESSAGES['monitoring_disabled'])
    else:
        await message.answer(BOT_MESSAGES['monitoring_not_running'])

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    start_polling(dp, skip_updates=True)